use namespace="System.Reflection"

default KrePackagesDir='${E("KRE_PACKAGES")}'
default FxCopInstallDir='${E("FXCOP_INSTALL_DIR")}'

@{
    if (string.IsNullOrEmpty(FxCopInstallDir))
    {
        Log.Warn("FXCOP_INSTALL_DIR not specified.");
        return;
    }

    if (!Directory.Exists(FxCopInstallDir))
    {
        throw new Exception("FxCop install directory does not exist");
    }

    if (string.IsNullOrEmpty(KrePackagesDir))
    {
        KrePackagesDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".kpm", "packages");
    }

    var argsBuilder = new StringBuilder();

    foreach (var packageId in Directory.EnumerateDirectories(KrePackagesDir))
    {
        var newestVersion = Directory.EnumerateDirectories(Path.Combine(KrePackagesDir, packageId))
                                     .OrderByDescending(d => d, StringComparer.OrdinalIgnoreCase)
                                     .First();

        var libDir = Path.Combine(KrePackagesDir, packageId, newestVersion, "lib");

        var aspnet50Dir = Path.Combine(libDir, "aspnet50");
        var net45Dir = Path.Combine(libDir, "net45");
        if (Directory.Exists(aspnet50Dir))
        {
            argsBuilder.AppendFormat("/d:\"{0}\" ", aspnet50Dir);
        }
        else if (Directory.Exists(net45Dir))
        {
            argsBuilder.AppendFormat("/d:\"{0}\" ", net45Dir);
        }
        else if (Directory.Exists(libDir))
        {
            var portableDir = Directory.EnumerateDirectories(libDir)
                                       .FirstOrDefault(d => d.Contains("net45"));
            if (portableDir != null)
            {
                argsBuilder.AppendFormat("/d:\"{0}\" ", portableDir);
            }
        }
    }

    var tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());

    argsBuilder.AppendFormat("/d:\"{0}\" ", tempDir);

    var srcBinaries = new List<string>();
    var srcDir = Path.Combine(Directory.GetCurrentDirectory(), "src");
    var aniDirs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    foreach (var project in Directory.EnumerateDirectories(srcDir))
    {
        var binaryDir = Path.Combine(srcDir, project, "bin", E("Configuration") ?? "debug", "aspnet50");
        if (Directory.Exists(binaryDir))
        {
            argsBuilder.AppendFormat("/d:\"{0}\" ", binaryDir);
            var binaryPath = Directory.EnumerateFiles(binaryDir, "*.dll").First();
            srcBinaries.Add(binaryPath);

            var assembly = Assembly.LoadFile(binaryPath);

            foreach (var resource in assembly.GetManifestResourceNames().Where(r => r.EndsWith(".dll", StringComparison.OrdinalIgnoreCase)))
            {
                var resourcePath = Path.Combine(tempDir, resource);
                var resourceDir = Path.GetDirectoryName(resourcePath);
                Directory.CreateDirectory(resourceDir);
                aniDirs.Add(resourceDir);

                using (var target = File.Create(resourcePath))
                using (var source = assembly.GetManifestResourceStream(resource))
                {
                    source.CopyTo(target);
                }
            }
        }
    }

    foreach (var dir in aniDirs)
    {
        argsBuilder.AppendFormat("/d:\"{0}\" ", dir);
    }

    var fxCopBinary = Path.Combine(FxCopInstallDir, "FxCopCmd.exe");
    var fxCopRuleset = Path.Combine(FxCopInstallDir, "Sdl", "Sdl6.1.ruleset");
    var isTeamCity = !String.IsNullOrEmpty(E("TEAMCITY_VERSION"));
    foreach (var binary in srcBinaries)
    {
        var outputFile = Path.ChangeExtension(binary, "codeanalysis.xml");
        var commandLineBuilder = new StringBuilder();
        commandLineBuilder.AppendFormat("/f:\"{0}\" /ruleset:=\"{1}\" ",
                                        binary,
                                        fxCopRuleset);
        commandLineBuilder.Append(argsBuilder)
                          .Append("/quiet ");
                          
        if (isTeamCity)
        {
            commandLineBuilder.AppendFormat("/out: \"{0}\" ", outputFile);
        }
        else
        {
            commandLineBuilder.Append("/console");
        }

        Exec(fxCopBinary, commandLineBuilder.ToString());
        
        if (isTeamCity)
        {
            Log.Info("##teamcity[importData type='FxCop' path='" + outputFile +"']");
        }
    }
}
